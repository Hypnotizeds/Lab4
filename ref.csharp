// 1. Упрощение установки режима
private void SetMode(bool isEnabled)
{
    label1.Enabled = isEnabled;
    button1.Enabled = isEnabled;
    button2.Enabled = isEnabled;
    button3.Enabled = !isEnabled;
    button4.Enabled = !isEnabled;
}

// 2. Консолидация статуса водителя
private string GetDriverStatus(ClientStatus status)
{
    return m_driverStatusNames[status];
}

// 3. Проверка длины числа
private bool IsSingleDigit(uint i)
{
    return i.ToString().Length == 1;
}

// 4. Оптимизация конкатенации строк
private string GetDestinationSubstring(string source)
{
    return source.Substring(0, Math.Min(source.Length, 13));
}

// 5. Проверка на число
private bool IsNumber(string str)
{
    return str.All(char.IsDigit);
}

// 6. Оптимизация отправки папок
private void CreateDirectories(DirectoryInfo dirs)
{
    foreach (DirectoryInfo dir in dirs.GetDirectories())
    {
        string folderPath = SubFolder.Replace('\\', '/') + dir.Name.Replace('\\', '/');
        stream.Write(new byte[] { (byte)NetworkMessage.MakeDir }, 0, 1);
        stream.Read(new byte[1], 0, 1);
        WriteFolderPath(folderPath);
    }
}

private void WriteFolderPath(string folderPath)
{
    byte[] folderBytes = Encoding.UTF8.GetBytes(folderPath);
    stream.Write(BitConverter.GetBytes(folderBytes.Length), 0, 4);
    stream.Write(folderBytes, 0, folderBytes.Length);
    stream.Read(new byte[1], 0, 1); // Ok
}

// 7. Использование массива дней
private string[] GetDaysOfWeek()
{
    return new[]
    {
        "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
    };
}

// 8. Форматирование времени
private string GetFormattedCurrentTime()
{
    DateTime dt = DateTime.Now;
    return $"--{dt:HH:mm:ss}--";
}

// 9. Проверка на четность
private bool IsCounterOdd(int counter)
{
    return (counter % 2 != 0) && (counter != 0);
}

// 10. Упрощение условий
private void HandleConnection(int connected)
{
    if (connected == 0)
    {
        rez = setup();
    }
}

// 11. Фильтрация элементов
private List<int> FilterArray(List<int> arr)
{
    return arr.Where(x => x <= 100).ToList();
}

// 12. Проверка на количество идентификаторов
private void ValidateIds(string[] ids)
{
    if (ids.Length != 1)
    {
        throw new Exception("Invalid number of IDs.");
    }
}

// 13. Использование поля имени
private (string firstName, string lastName) SplitName(string fullName)
{
    var nameParts = fullName.Split(' ');
    string firstName = nameParts[0];
    string lastName = string.Join(' ', nameParts.Skip(1));
    return (firstName, lastName);
}

// 14. Преобразование идентификаторов
private int GetFirstSourceId(string sourceIDs)
{
    return sourceIDs.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                    .Select(id => Convert.ToInt32(id))
                    .FirstOrDefault();
}

// 15. Генерация email
public string GenerateEmail()
{
    var nameParts = PersonName.Split(' ');
    string email = $"{nameParts[0]}.{string.Join("", nameParts.Skip(1))}@domain.ua";
    return email.Length > 20 ? email.Substring(0, 20) : email;
}

// 16. Удаление дублирования
// Код уже оптимизирован в 14-м пункте.

// 17. Разделение текста
private string GetTextDivided(string text)
{
    int mid = text.Length / 2;
    int leftSpaceIndex = text.LastIndexOf(' ', mid);
    int rightSpaceIndex = text.IndexOf(' ', mid);

    mid = (leftSpaceIndex < 0 && rightSpaceIndex < 0) ? mid : (rightSpaceIndex < 0 || (leftSpaceIndex >= 0 && leftSpaceIndex > mid)) ? leftSpaceIndex : rightSpaceIndex;

    return mid >= 0 ? $"&nbsp{text.Substring(0, mid)} <br/>&nbsp{text.Substring(mid)}" : "&nbsp" + text;
}

// 18. Определение символов
private static readonly char SPECIFIER = '$';
private static readonly char DELIMITER = ':';

// 19. Получение адреса электронной почты
private string GetMailTo()
{
    string email = Config.GetSetting("AdminNotifications_EmailAddress");
    return string.IsNullOrEmpty(email) ? Globals.GetHostPortalSettings().HostSettings["SMTPPassword"].ToString() : email;
}

// 20. Проверка пути
public bool CheckPath(string path)
{
    string[] requiredDirectories = { "SCLAD", "REAL", "DOSTAVKA" };
    string[] requiredFiles = { "analit.dbf", "partner.dbf", "SCLAD\\mdoc.dbf", "SCLAD\\mdoc.fpt", "SCLAD\\mdocm.dbf", "SCLAD\\mgrup.dbf", "SCLAD\\mlabel.dbf", "SCLAD\\mlabel.fpt", "REAL\\rbookm.dbf", "REAL\\rbook.dbf", "REAL\\rbook.fpt", "DOSTAVKA\\avt.dbf", "DOSTAVKA\\avtm.dbf", "DOSTAVKA\\avtm.fpt", "DOSTAVKA\\cargo.dbf", "DOSTAVKA\\cargom.dbf", "DOSTAVKA\\zamena.dbf" };
    
    int count = requiredDirectories.Count(dir => Directory.Exists(Path.Combine(path, dir))) +
                requiredFiles.Count(file => File.Exists(Path.Combine(path, file)));

    return count == requiredDirectories.Length + requiredFiles.Length;
}

// 21. Форматирование текста контактов
private string FormatContacts(IEnumerable<string> contacts)
{
    return string.Join(";", contacts);
}

// 22. Упрощение управления состоянием
private void ToggleGame1Cloud()
{
    Game1.clou = !Game1.clou;
}
